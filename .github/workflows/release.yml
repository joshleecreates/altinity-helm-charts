name: Release Charts

on:
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  # verify:
  #   uses: ./.github/workflows/ci.yml

  # generate-docs:
  #   needs: verify
  #   uses: ./.github/workflows/docs.yml

  release:
    needs: [verify]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Configure Git
        run: |
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Add Operator Chart Repo
        run: |
          helm repo add altinity-operator https://docs.altinity.com/clickhouse-operator
          helm repo add altinity https://helm.altinity.com/

      # - name: Generate docs
      #   run: make docs

      - name: Extract chart details
        id: extract-chart
        run: |
          # Handle both tag and branch push events
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            TAG=${GITHUB_REF#refs/tags/}
            # Extract chart name if tag follows pattern like chart-name-x.y.z
            CHART_NAME=$(echo $TAG | sed -E 's/([^-]+)-[0-9]+\.[0-9]+\.[0-9]+.*/\1/')
            echo "Using tag: $TAG"
          else
            # For branch pushes, we'll scan for modified charts
            echo "Scanning for modified charts in branch push..."
            # Find all modified charts by checking Chart.yaml changes
            MODIFIED_CHARTS=$(git diff --name-only HEAD~1 HEAD | grep "charts/.*/Chart.yaml" || echo "")
            
            if [[ -z "$MODIFIED_CHARTS" ]]; then
              echo "No charts were modified in this push"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            fi
            
            # Just take the first modified chart for now
            FIRST_CHART=$(echo "$MODIFIED_CHARTS" | head -n 1)
            CHART_DIR=$(dirname "$FIRST_CHART")
            CHART_NAME=$(basename $(dirname "$FIRST_CHART"))
            
            # Get the version from Chart.yaml
            VERSION=$(grep -E '^version:' "$FIRST_CHART" | awk '{print $2}' | tr -d '"')
            TAG="${CHART_NAME}-${VERSION}"
            
            echo "Modified chart: $CHART_NAME, version: $VERSION, tag: $TAG"
          fi
          
          echo "chart_name=$CHART_NAME" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "skip=false" >> $GITHUB_OUTPUT

      - name: Check if release exists
        if: steps.extract-chart.outputs.skip != 'true'
        id: check_release
        run: |
          CHART_NAME="${{ steps.extract-chart.outputs.chart_name }}"
          TAG="${{ steps.extract-chart.outputs.tag }}"
          
          # Check if a release for this chart version already exists
          if helm repo update && helm search repo altinity/$CHART_NAME --version ${TAG#$CHART_NAME-} > /dev/null 2>&1; then
            echo "Release already exists for $TAG"
            echo "release_exists=true" >> $GITHUB_OUTPUT
          else
            echo "No release found for $TAG"
            echo "release_exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Run chart-releaser
        if: steps.extract-chart.outputs.skip != 'true' && steps.check_release.outputs.release_exists != 'true'
        uses: helm/chart-releaser-action@v1.6.0
        with:
          charts_dir: charts
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
